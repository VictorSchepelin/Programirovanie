#define _CRT_SECURE_NO_WARNINGS
#define _CRT_NONSTDC_NO_DEPRECATE
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <locale>
#include <iostream>;
using namespace std;

FILE* file;
const char* filename = "output.txt";

struct point
{
	int key;	// ключевое поле элемента списка
	point* next;  // указатель на следующий элемент
};

point* createList()  // функция создания списка. Возвращает указатель на голову списка (первый элемент)
{
	int n;
	cout << "Введите количество элементов списка: ";
	cin >> n;
	point* head, * p;  //голова списка head и вспомогательный элемент р
	if (n == 0)
		head = NULL;  // если введенное значение 0, то создаём пустой список
	else    // список создаём по типу "стек", поэтому вставляем ключи от большего к меньшему,
	{       // чтобы полученный список начинался с ключевого поля "1"
		head = new(point);   //создаём голову списка
		head->key = n;    // добавляем ключевое значение
		head->next = NULL;  //указателю на следующий элемент присваиваем NULL
		for (int i = n - 1; i > 0; i--)  // далее в цикле создаём остальные элементы и присоединяем их к списку
		{                                // используем вспомогательный элемент р
			p = new(point);              // при создании списка head всегда указывает на первый элемент списка
			p->key = i; i = 100 ;
			p->next = head;     // соединяем элементы: указатель на следующий теперь указывает на элемент, который до этого был первым
			head = p;           // перемещаем указатель на голову на первый элемент. Теперь head опять указывает на первый элемент списка.
		}
	}
	return head;
}

void printList(point* head)  // процедура печати списка на консоль
{
	point* p;
	p = head;  // дополнительный указатель устанавливаем на голову списка
	if (head == NULL)
		cout << "Список пуст!\n";  // если список пуст, выводим сообщение
	while (head != NULL)  // иначе печатаем список, пока не достигнем конца списка 
	{
		cout << head->key << " ";  //напечатали ключ
		head = head->next;         // переместили указатель на следующий элемент
	}
	cout << "\n";
	head = p;   // указатель head возвращаем в начало списка
}

point* addInList(point* head)  //функция добавления элементов в список
{
	int pos, k;
	cout << "Ведите номер элемента, после которого будем добавлять элементы: ";
	cin >> pos;
	cout << "Сколько элементов будем добавлять? ";
	cin >> k;
	point* p, * help;  // вспомогательный указатель
	p = head;	//сохраняем голову списка
	int count = 1;
	while (head != NULL) //идем по списку, пока не достигнем конца списка
	{
		if (pos == count)	//если нашли элемент, ПОСЛЕ которого надо вставлять, то производим вставку
		{
			for (int i = 0; i < k; i++) //вставляем k элементов с ключом 100
			{
				help = new (point);
				help->key = 100;
				help->next = head->next;
				head->next = help;
			}
			head = p;	//ставим указатель head на начало списка
			break;	//выходим из цикла
		}
		count++;	//увеличиваем счетчик
		head = head->next;	//передвигаемся на следующий элемент
	}
	return head;
}

point* deleteFromList(point* head)  //функция удаления элемента из списка
{
	int k;
	cout << "Введите номер элемента для удаления: ";
	cin >> k;
	point* p, * q; // в p будем хранить голову списка, в q будем помещать элемент, который надо удалить
	bool find_el;
	find_el = false; //переменная, с помощью которой узнаём, есть элемент с таким ключом или нет
	if (head->key == k) //если нужно удалить первый элемент
	{
		q = head;
		head = head->next;
		delete(q); // удаляем элемент
	}
	else
	{
		p = head;   // сохраняем указатель на голову списка
		while ((!find_el) && (head->next != NULL))  //пока не нашли или не достигли конца списка
		{
			if (head->next->key == k)
				find_el = true;  // если следующий элемент имеет искомое ключевое значение, значит find_el=true (нашли)
			else head = head->next;                // иначе перемещаемся на следующий элемент
		}	 // т.к. остановили цикл тогда, когда нашли элемент, значит HEAD УКАЗЫВАЕТ на элемент, который стоит ПЕРЕД удаляемым элементом
		if (!find_el) {  //если не нашли элемент, то возвращаем указатель на начало списка и сообщаем об этом
			head = p;
			cout << "Такого элемента в списке нет.\n";
		}
		else
		{
			q = head->next;     // устанавливаем указатель q на элемент, который надо удалить
			head->next = q->next;	//переставляем связи и удаляем элемент
			head = p;
			delete(q);
		}
	}
	return head;
}

point* deleteList(point* head)  // функция удаления списка
{
	point* q;  // вспомогательный указатель
	while (head != NULL)  // выполняем в цикле, пока не достигнем конца списка
	{
		q = head;   // берем первый элемент списка
		head = head->next; // при этом перемещаем голову на следующий элемент списка
		delete(q); //удаляем первый элемент списка
	}
	head = NULL; // теперь список пустой
	cout << "Список успешно удалён.\n";
	return head;
}

void printListFile(point* head)  //процедура печати списка в файл
{
	file = fopen(filename, "w");   // всё работает ТОЧНО ТАК ЖЕ, как и в процедуре PrintList (см. выше)
	point* p;
	p = head;
	while (head != NULL)
	{
		fprintf(file, "%d ", head->key);
		head = head->next;
	}
	cout << "Запись в файл прошла успешно.\n";
	head = p;
	fclose(file);
}

point* createListFromFile()
{
	file = fopen(filename, "r");   // открываем файл для чтения
	point* head, * p, * q;
	if (feof(file))
		head = NULL;  // если конец файла сразу же, значит список будет пустым
	else                          //иначе создаём список, считывая из файла ключевые значения
	{
		int a = 0;				// создание списка происходит ТОЧНО ТАК ЖЕ, как в функции CreateList (см. выше)
		head = new(point);      // создали голову списка 
		fscanf(file, "%d", &a);
		head->key = a;
		head->next = NULL;
		q = head;
		fscanf(file, "%d", &a); // считали следующий элемент
		while (!feof(file))  // выполняем цикл до тех пор, пока не достигнем конца файла
		{
			p = new(point);
			p->key = a;
			p->next = NULL;
			head->next = p;
			head = head->next;
			fscanf(file, "%d", &a); // считали следующий элемент
		}
		head = q;
	}
	fclose(file);
	return head;
}

void main()
{
	setlocale(LC_ALL, "russian"); // чтобы на консоли отображались русские буквы
	point* head;
	cout << "---------- Создание списка ----------\n";
	head = createList();  // 1. создание списка
	cout << "---------- Печать списка ----------\n";
	printList(head);       // 2. печать списка
	cout << "---------- Добавление элементов в список ----------\n";
	head = addInList(head);// 3. добавление элементов
	cout << "Результат:\n";
	printList(head);
	cout << "---------- Удаление элементов из списка ----------\n";
	head = deleteFromList(head);// 4. удаление элементов
	cout << "Результат:\n";
	printList(head);
	cout << "---------- Запись списка в файл ----------\n";
	printListFile(head);   // 5. запись списка в файл
	cout << "---------- Уничтожение списка ----------\n";
	head = deleteList(head);	   // 6. уничтожение списка,
	cout << "---------- Печать списка ----------\n";
	printList(head);       // печать списка
	cout << "---------- Восстановление списка из файла ----------\n";
	head = createListFromFile(); // 8. восстановление списка из файла
	printList(head);       // 9. печать списка
	cout << "---------- Уничтожение списка ----------\n";
	deleteList(head);      // 10. уничтожение списка
	system("pause"); // чтобы после выполнения программы консоль не исчезала сразу же
}